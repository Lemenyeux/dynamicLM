% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.penLM.R
\name{cv.penLM}
\alias{cv.penLM}
\title{Cross-validation for a  regular or cause-specific Cox landmark supermodel
with lasso or elasticnet penalization.}
\usage{
cv.penLM(
  x,
  y,
  LMdata,
  xcols,
  ID_col,
  nfolds = 10,
  type.measure = "deviance",
  seed = NULL,
  ...
)
}
\arguments{
\item{x}{Input matrix with each row an observation.}

\item{y}{Response variable: either a \code{Surv} or \code{Hist} object.}

\item{LMdata}{An object of class "LMdataframe", this can be created by
running \code{cutLMsuper} and \code{addLMtime}}

\item{xcols}{A vector of column names of the data stored in \code{LMdata} that
are to be used as dependent variables. If not specified, it is assumed that
all non-response variables are the dependent variables.}

\item{ID_col}{TODO}

\item{nfolds}{Number of folds in k-fold cross validation. Default is 10.}

\item{type.measure}{Loss for cross-validation. Currently the only option is
"deviance" which is the partial-likelihood for the Cox model. If using
cause-specific Cox models, this is evaluated on each model separately.}

\item{seed}{TODO}

\item{...}{Additional arguments to \code{cv.glmnet}.}
}
\value{
An object class \code{cv.penLM}. This is a list of \code{cv.glmnet} objects
(one for each cause-specific Cox model or a list of length one for a
regular Cox model). The object also has attributes \code{survival.type}
(\code{competing.risk} or \code{survival}) and \code{LMdata} and \code{xcols} which store the
inputs if given.
Functions \code{print} and \code{plot} exist for the object. To make predictions,
see \code{fitLM.cv.penLM}.
}
\description{
Fit by calling \code{cv.glmnet}. As in \code{cv.glmnet}, k-fold cross validation is
performed. This produces a plot and returns a value for lambda. Input can be
as typically done for \code{cv.glmnet} in the form of \code{x} and \code{y} or with a
landmark super dataset \code{LMdata} specifying dependent columns in \code{xcols}.
}
\examples{
\dontrun{
data(relapse)
outcome = list(time="Time", status="event")
covars = list(fixed=c("ID","age.at.time.0","male","stage","bmi"),
              varying=c("treatment"))
w = 60; LMs = c(0,12,24)
# Covariate-landmark time interactions
func.covars <- list( function(t) t, function(t) t^2)
# let hazard depend on landmark time
func.LMs <- list( function(t) t, function(t) t^2)

# Stack landmark datasets
LMdata <- cutLMsuper(relapse, outcome, LMs, w, covars, format="long",
                     id="ID", rtime="T_txgiven", right=F)
# Update complex LM-varying covariates, note age is in years and LM is in months
LMdata$LMdata$age <- LMdata$LMdata$age.at.time.0 + LMdata$LMdata$LM/12
# Choose covariates that will have time interaction
pred.covars <- c("age","male","stage","bmi","treatment")
# Add LM-time interactions
LMdata <- addLMtime(LMdata, pred.covars, func.covars, func.LMs)

xcols <- c("age","male","stage","bmi","treatment","age_1","age_2","male_1",
           "male_2","stage_1","stage_2","bmi_1","bmi_2","treatment_1",
           "treatment_2","LM_1","LM_2")

pen_supermodel <- cv.penLM(LMdata, xcols)
print(pen_supermodel)
plot(pen_supermodel)
}
}
