% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_interactions.R
\name{add_interactions}
\alias{add_interactions}
\title{Add landmarking time interactions to a super dataset}
\usage{
add_interactions(lmdata, lm_covs, func_covars, func_lms, lm_col, keep = T)
}
\arguments{
\item{lmdata}{An object of class "LMdataframe".

This can be created by running \code{\link[=stack_data]{stack_data()}}, or creating a
stacked data set and storing it in a list with attributes outcome, w and
end_time (see \code{\link[=stack_data]{stack_data()}} for further description of outcome
and w), end_time is the largest landmarking time.}

\item{lm_covs}{Vector of strings indicating the columns (covariates) that are
to have an interaction with the landmark times.}

\item{func_covars}{A list of functions to use for interactions between
landmarks and covariates. For example,
\code{list( function(t) t, function(t) t^2)} will, for each covariate \code{x},
create \code{x}, \code{x*t}, \code{x*t^2}.}

\item{func_lms}{A list of functions to use for transformations of the
landmark times.}

\item{lm_col}{Character string specifying the column name that indicates the
landmark time point for a row. Obtained from \code{lmdata} if not input.}

\item{keep}{Boolean value to indicate whether or not to keep the columns
given by \code{lm_covs} without the time interactions. Default is TRUE.}
}
\value{
An object of class "LMdataframe" which now also contains LM
time-interactions.
The object has the following components:
\itemize{
\item w, outcome: as the input (obtained from lmdata)
\item func_covars: as the input
\item func_lms: as the input
\item lm_covs: as the input
\item all_covs: a list of the new columns added. This includes \code{lm_covs}
if \code{keep} is TRUE.
\item lm_col: as the input
}
}
\description{
The stacked dataset output is used as input to \code{\link[=dynamic_lm]{dynamic_lm()}} to fit a landmark
supermodel for dynamic prediction.
}
\details{
For each variable "var" in \code{lm_covs}, new columns var_1,...,var_i
(length(func_covars) == i) are added; one column for each interaction given
in func_covars is added.

Transformations of the LM column are added and labelled as LM_1,...,LM_j
(length(func_lms) == j); one column for each interaction given in func_lms
is added.
}
\examples{
\dontrun{
data(relapse)
outcome <- list(time = "Time", status = "event")
covars <- list(fixed = c("ID","age.at.time.0","male","stage","bmi"),
               varying = c("treatment"))
w <- 60; lms <- c(0, 6, 12, 18)
LMs = seq(0,36,by=6)
# Covariate-landmark time interactions
func_covars <- list(function(t) t, function(t) t^2)
# let hazard depend on landmark time
func_lms <- list(function(t) t, function(t) t^2)
# Choose covariates that will have time interaction
pred_covars <- c("age","male","stage","bmi","treatment")
# Stack landmark datasets
lmdata <- stack_data(relapse, outcome, lms, w, covars, format = "long",
                     id = "ID", rtime = "T_txgiven")
# Update complex landmark-varying covariates
# note age is in years and LM is in months
lmdata$data$age <- lmdata$data$age.at.time.0 + lmdata$data$LM/12
# Add LM-time interactions
lmdata <- add_interactions(lmdata, pred_covars, func_covars, func_lms)
head(lmdata$data)
}

}
